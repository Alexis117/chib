{"version":3,"sources":["../../src/models/models.js"],"names":["user","sequelize","DataTypes","Sequelize","User","define","id","type","UUID","primaryKey","defaultValue","UUIDV4","name","STRING","allowNull","validate","len","args","msg","notNull","lastName","phoneNumber","unique","validateCountryCode","value","userType","test","Error","is","isIn","associate","models","hasMany","as","foreignKey","constraints","card","Card","cardNumber","isCreditCard","expDate","DATE","isDate","belongsTo"],"mappings":"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","file":"models.js","sourcesContent":["function user (sequelize, DataTypes, Sequelize) {\n    const User = sequelize.define('user', {\n      id: {\n        type: DataTypes.UUID,\n        primaryKey: true,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate:{\n            len: {\n                args: [3,32],\n                msg: \"Name must have 3 or more chars\"\n            },\n            notNull:{\n                msg: \"Missing arg name\"\n            }\n        }\n      },\n      lastName: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate:{\n            len: {\n                args: [3,32],\n                msg: \"Last name must have 3 or more chars\"\n            },\n            notNull:{\n                msg: \"Missing arg lastName\"\n            }\n        }\n      },\n      phoneNumber: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: 'phoneNumber',\n        validate: {\n            validateCountryCode(value) {\n                if (this.userType === \"1\" && !/1[0-9]{10}/.test(value)){\n                  throw new Error('Phone number in US must begin with 1');\n                }\n                else if (this.userType === \"2\" && !/52[0-9]{10}/.test(value)){\n                    throw new Error('Phone number in MX must begin with 52');\n                }\n            },\n            is:{\n                args: [/1|52[0-9]{10}/i],\n                msg: \"Phone number must be a country code (US/MX) + 10 digit number\"\n            },\n            notNull:{\n                msg: \"Missing arg phoneNumber\"\n            }\n        }\n      },\n      userType: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n            isIn: {\n                args: [['1', '2']],\n                msg: \"User type must be 1 or 2\"\n            },\n            notNull:{\n                msg: \"Missing arg userType\"\n            }\n        }\n      }\n    });\n\n    User.associate = models => {\n        User.hasMany(models.User, {as: 'beneficiaries', foreignKey: 'beneficiaryId', constraints: false})\n        User.hasMany(models.User, {as: 'benefactors', foreignKey: 'benefactorsId', constraints: false})\n        //User.belongsToMany(models.User, {as: 'benefactories'})\n    };\n\n    return User;\n};\n\nfunction card (sequelize, DataTypes, Sequelize) {\n    const Card = sequelize.define('card', {\n      id: {\n        type: DataTypes.UUID,\n        primaryKey: true,\n        defaultValue: Sequelize.UUIDV4\n      },\n      cardNumber: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate:{\n            isCreditCard:{\n                args: true,\n                msg: \"Invalid card number format\"\n            },\n            notNull:{\n                msg: \"Missing arg cardNumber\"\n            }\n        }\n      },\n      expDate:{\n          type: DataTypes.DATE,\n          allowNull: false,\n          validate:{\n            notNull:{\n                msg: \"Missing arg expDate\"\n            },\n            isDate:{\n                args: true,\n                msg: \"Exp date must be in date format (YYYY-MM-DD)\"\n            }\n        }\n      }\n    });\n\n    Card.associate = models => {\n        Card.belongsTo(models.User)\n    };\n\n    return Card;\n};\n\nexport {\n    user, card\n}"]}